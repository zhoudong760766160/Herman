chapter1 ----OOP
Java初始化：
    1.静态优先于非静态，静态一次，非静态可能多次
    2.父类优先于子类
    3.按照定义的先后顺序

作用域：
    1.public 所有的类或对象都可访问
    2.protected 当前类及其子类 同一个包下面的类
    3.private 当前类
    4.default 当前类及同一个包下面的类，父类不同包也不可访问
    5.private/protected不能修饰类 public/abstract/final可用于修饰类

构造函数：
    1.与类名相同的无返回值的方法，可以重载，不可重写
    2.子类可通过super关键词调用父类的构造方法，当父类没有申明无参构造器，子类必须显示调用父类的构造器
    3.默认构造器修饰符与当前类修饰符一致

clone
    浅复制：
    1.基本类型的成员变量，clone后的对象值得改变不会影响源对象
    2.引用类型的成员变量，clone后的对象值的改变会影响源对象
     深复制：
    1.无论基本类型或引用类型，clone后的对象的改变均不影响源对象
    2.实现方法，对引用类型的成员变量调用其本身的clone方法

创建对象的四种方法：
    1.构造器
    2.通过反射机制
    3.通过clone方法
    4.通过反序列化

面向对象与面向过程
    1.面向对象低耦合/易维护/易扩展
    2.面向过程性能更高

面向对象：抽象/继承/多态/封装

static：
    1.主要用来修饰无需实例化对象就可以调用的方法
    2.static代码块只需初始化一次，可提高代码性能
    3.static不可用于修饰局部变量，Java语法规定
    4.序列化不能序列化static修饰的变量

final：
    1.可用于修饰类/方法/变量(包含局部变量)
    2.修饰的类不可继承，修饰的方法不可重写
    3.修饰的变量只能赋值一次，引用类型的变量指向不能变
    4.在编译器确切知道final变量值的情况下， 编译器会将该变量视作编译常量来使用

值传递:
    1.Java只有值传递

Volatile:
    1.设计用来被不同线程访问和修改的变量
    2.Java程序中，编译器对经常被访问的变量进行优化，缓存到寄存器中，这时候多线程的情况下可能导致访问的变量值不一致
    3.Volatile保证每个线程都是直接从内存中读取变量的值
    4.Volatile会阻止编译器对代码的优化，降低程序运行效率，尽量避免去使用

基本数据类型：
    1.byte/short/int/long   double/float  char  boolean
    2.直接存放到栈内存
    3.char 2字节 boolean 1字节
    4.float 2字节 声明的时候  0.0f 或 0.0F double 4字节
    5.byte 1字节8位  最大值 0111 1111 = 2^7-1 = 127  最小值 1000 0000 = -128 其余以此类推

Math:
    1.round():原始取值+0.5f向下取整
    2.ceil():大于当前值的最小整数
    3.floor():小于当前值的最大整数

char：
    1.默认使用Unicode编码：中文2个字节，英文1个字节